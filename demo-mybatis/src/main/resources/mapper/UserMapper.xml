<?xml version="1.0" encoding="UTF-8" ?>
<!--config dtd 约束-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace = dao interface-->
<mapper namespace="com.liam.demo.mapper.UserMapper">

    <!--定制查询结果集中，列和pojo属性直接的映射关系-->
    <resultMap id="BasicResultMap" type="User">
        <!--指定查询结果集记录的唯一标识-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
    </resultMap>

    <resultMap id="UserItemsMap" type="com.liam.demo.model.pojo.UserCustom" extends="BasicResultMap">
        <collection property="itemList" ofType="com.liam.demo.model.pojo.Item">
            <id column="item_id" property="id"/>
            <result column="item_name" property="name"/>
            <result column="item_price" property="price"/>
            <result column="item_detail" property="detail"/>
        </collection>
    </resultMap>

    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.sex != null">
                and sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username != null">
                and username like concat('%', #{userCustom.username}, '%')
            </if>
        </if>
    </sql>

    <!--配置sql, 对应mapper statement-->
    <!--id=findUserById sql的唯一标识-->
    <!--sql, 输入和输出的类型-->
    <!--这里User是别名，在配置文件中定义了typeAliases别名-->
    <select id="findUserById" parameterType="int" resultType="User">
        select *from tb_user where id = #{id}
    </select>

    <!--使用resultMap定制输出映射-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="BasicResultMap">
        select id as _id, username as _username, sex as _sex from tb_user where id = #{id}
    </select>

    <!--result type 指定的是单条记录的返回类型-->
    <!--使用${value}拼接符可实现value参数替换，可能引发SQL注入的问题，例如注入"or 1=1 or" => % or 1 = 1 or %-->
    <!--<select id="findUserByName" parameterType="java.lang.String" resultType="com.liam.demo.model.pojo.User">-->
        <!--select *from tb_user where username like '%${value}%'-->
    <!--</select>-->

    <select id="findUserByName" parameterType="java.lang.String" resultType="com.liam.demo.model.pojo.User">
        select *from tb_user where username like concat('%', #{value}, '%')
    </select>


    <select id="findUserItems" resultMap="UserItemsMap">
        select A.*,
        D.id as item_id, D.name as item_name, D.price as item_price, D.detail as item_detail
        from tb_user as A
          inner join tb_order as B
            on A.id = B.user_id
          inner join tb_order_detail as C
            on C.order_id = B.id
          inner join tb_item as D
            on D.id = C.item_id;
    </select>

    <!--添加用户, 参数类型为pojo, 占位符名称为pojo的属性名称， mybatis通过OGNL获取对象的属性-->
    <insert id="addUser" parameterType="com.liam.demo.model.pojo.User">
        <!--select key, 在插入后执行查询，并将查询结果设置到parameter的keyPropertey属性中 -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into tb_user(username, sex)
        values(#{username}, #{sex})
    </insert>

    <!--添加用户，插入非自增主键UUID，在插入前执行select生成UUID-->
    <!--<insert id="addUserByUUID" parameterType="com.liam.demo.model.pojo.User">-->

        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
            <!--select UUID()-->
        <!--</selectKey>-->

        <!--insert into tb_user(id, username, sex)-->
        <!--values(#{id}, #{username}, #{sex})-->
    <!--</insert>-->

    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from tb_user where id = #{id}
    </delete>

    <update id="updateUser" parameterType="com.liam.demo.model.pojo.User">
        update tb_user set username = #{username}, sex = #{sex}
        where id = #{id}
    </update>


    <!--综合查询sql, 动态sql-->
    <select id="findUserList" parameterType="com.liam.demo.model.pojo.UserQueryVO" resultType="com.liam.demo.model.pojo.UserCustom">
        select *from tb_user
        <where>
            <!--引用sql片段-->
            <include refid="query_user_where"/>
            <!--引用其他sql片段或if语句-->

            <!-- list 解析, in 或 or -->
            <if test="ids != null and ids.size > 0">
                and id in
                <foreach collection="ids" item="userId" open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            <!--<if test="ids != null and ids.size > 0">-->
                <!--<foreach collection="ids" item="userId" open="and (" close=")" separator="or">-->
                    <!--id = #{userId}-->
                <!--</foreach>-->
            <!--</if>-->
        </where>
    </select>

    <select id="findUserCount" parameterType="com.liam.demo.model.pojo.UserQueryVO" resultType="int">
        select count(*) from tb_user
        <where>
            <if test="userCustom != null">
                <if test="userCustom.sex != null">
                    and sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username != null">
                    and username like concat('%', #{userCustom.username}, '%')
                </if>
            </if>
        </where>
    </select>


</mapper>